datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Application   Application[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id           String        @id @default(cuid())
  title        String
  isBase       Boolean       @default(false)
  baseResumeId String?
  fileName     String
  fileUrl      String
  fileType     String
  fileSize     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Application  Application[]
}

enum ApplicationStatus {
  INTERESTED
  APPLIED
  PHONE_SCREEN
  INTERVIEW
  TECHNICAL_ASSESSMENT
  FINAL_INTERVIEW
  OFFER
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model Application {
  id              String  @id @default(uuid())
  external_job_id Int // Reference to the job ID from the external API
  user_id         String
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  resume_id       String?
  resume          Resume? @relation(fields: [resume_id], references: [id])

  // Important job details to cache locally
  job_title     String
  company       String
  location      String?
  job_url       String?
  company_logo  String?
  salary_string String?
  description   String?

  // Application status and tracking
  status              ApplicationStatus @default(INTERESTED)
  notes               String?
  applied_date        DateTime?
  last_contact_date   DateTime?
  next_follow_up_date DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([external_job_id, user_id])
}
